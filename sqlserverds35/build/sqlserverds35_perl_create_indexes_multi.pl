# sqlserverds3_perl_create_indexes_multi.pl
# Script to create a ds3 indexes in sqlserver with a provided number of copies - supporting multiple stores
# Syntax to run - perl sqlserverds35_perl_create_indexes_multi.pl <sqlserver_target> <number_of_stores> <password>

use strict;
use warnings;

my $sqlservertarget = $ARGV [0];
my $numberofstores = $ARGV[1];
my $password = $ARGV[2] || 'password';

my $sqlservertargetdir;

$sqlservertargetdir = $sqlservertarget;

# remove any backslashes from string to be used for directory name
$sqlservertargetdir =~ s/\\//;

system ("mkdir -p $sqlservertargetdir");

my $pathsep;

# This section enables support for Linux and Windows - detecting the type of OS, and then using the proper commands
if ("$^O" eq "linux")
        {
        $pathsep = "/";
        }
else
        {
        $pathsep = "\\\\";
        };

foreach my $k (1 .. $numberofstores){
	open (my $OUT, ">$sqlservertargetdir${pathsep}sqlserverds35_createindexes$k.sql") || die("Can't open sqlserverds35_indexes$k.sql");
	print $OUT "USE DS3
GO

ALTER TABLE CATEGORIES$k ADD CONSTRAINT PK_CATEGORIES$k PRIMARY KEY CLUSTERED 
  (
  CATEGORY
  )  
  ON DS_MISC_FG 
GO

ALTER TABLE CUSTOMERS$k ADD CONSTRAINT PK_CUSTOMERS$k PRIMARY KEY CLUSTERED 
  (
  CUSTOMERID
  )  
  ON DS_CUST_FG 
GO

CREATE UNIQUE INDEX IX_CUST_UN_PW$k ON CUSTOMERS$k 
  (
  USERNAME, 
  PASSWORD
  )
  ON DS_IND_FG
GO

CREATE INDEX IX_CUST_HIST_CUSTOMERID$k ON CUST_HIST$k
  (
  CUSTOMERID
  )
  ON DS_IND_FG
GO

CREATE INDEX IX_CUST_HIST_CUSTOMERID_PRODID$k ON CUST_HIST$k 
  (
  CUSTOMERID ASC,
  PROD_ID ASC
  )
  ON DS_IND_FG
GO

ALTER TABLE CUST_HIST$k
  ADD CONSTRAINT FK_CUST_HIST_CUSTOMERID$k FOREIGN KEY (CUSTOMERID)
  REFERENCES CUSTOMERS$k (CUSTOMERID)
  ON DELETE CASCADE
GO

ALTER TABLE ORDERS$k ADD CONSTRAINT PK_ORDERS$k PRIMARY KEY CLUSTERED 
  (
  ORDERID
  )  
  ON DS_ORDERS_FG 
GO

CREATE INDEX IX_ORDER_CUSTID$k ON ORDERS$k
  (
  CUSTOMERID
  )
  ON DS_IND_FG
GO

ALTER TABLE ORDERLINES$k ADD CONSTRAINT PK_ORDERLINES$k PRIMARY KEY CLUSTERED 
  (
  ORDERID,
  ORDERLINEID
  )  
  ON DS_ORDERS_FG 
GO

ALTER TABLE ORDERLINES$k ADD CONSTRAINT FK_ORDERID$k FOREIGN KEY (ORDERID)
  REFERENCES ORDERS$k (ORDERID)
  ON DELETE CASCADE
GO

ALTER TABLE INVENTORY$k ADD CONSTRAINT PK_INVENTORY$k PRIMARY KEY CLUSTERED 
  (
  PROD_ID
  )  
  ON DS_MISC_FG 
GO

ALTER TABLE PRODUCTS$k ADD CONSTRAINT PK_PRODUCTS$k PRIMARY KEY CLUSTERED 
  (
  PROD_ID
  )  
  ON DS_MISC_FG 
GO

CREATE INDEX IX_PROD_PRODID$k ON PRODUCTS$k 
  (
  PROD_ID ASC
  )
  INCLUDE (TITLE)
  ON DS_IND_FG
GO

CREATE INDEX IX_PROD_PRODID_COMMON_PRODID$k ON PRODUCTS$k
  (
  PROD_ID ASC,
  COMMON_PROD_ID ASC
  )
  INCLUDE (TITLE, ACTOR)
  ON DS_IND_FG
GO

CREATE INDEX IX_PROD_SPECIAL_CATEGORY_PRODID$k ON PRODUCTS$k 
  (
  SPECIAL ASC,
  CATEGORY ASC,
  PROD_ID ASC
  )
  INCLUDE (TITLE, ACTOR, PRICE, COMMON_PROD_ID)
  ON DS_IND_FG
GO

CREATE FULLTEXT CATALOG FULLTEXT_DSPROD$k ON FILEGROUP DS_FULLTEXT_FG;
GO
CREATE FULLTEXT INDEX ON PRODUCTS$k
	( 
	ACTOR,
	TITLE
	)
	KEY INDEX PK_PRODUCTS$k 
	ON FULLTEXT_DSPROD$k;
GO

CREATE INDEX IX_PROD_CATEGORY$k ON PRODUCTS$k 
  (
  CATEGORY
  )
  ON DS_IND_FG
GO

CREATE INDEX IX_PROD_SPECIAL$k ON PRODUCTS$k
  (
  SPECIAL
  )
  ON DS_IND_FG
GO

CREATE INDEX IX_PROD_MEMBERSHIP$k ON PRODUCTS$k
  (
  MEMBERSHIP_ITEM
  )
  ON DS_IND_FG
GO

CREATE INDEX IX_INV_PROD_ID$k on INVENTORY$k
  (
  PROD_ID
  )
  ON DS_IND_FG
GO

ALTER TABLE MEMBERSHIP$k ADD CONSTRAINT PK_MEMBERSHIP$k PRIMARY KEY CLUSTERED 
  (
  CUSTOMERID
  )  
  ON DS_IND_FG 
GO

ALTER TABLE MEMBERSHIP$k
  ADD CONSTRAINT FK_MEMBERSHIP_CUSTID$k FOREIGN KEY (CUSTOMERID)
  REFERENCES CUSTOMERS$k (CUSTOMERID)
  ON DELETE CASCADE
GO

ALTER TABLE REVIEWS$k ADD CONSTRAINT PK_REVIEWS$k PRIMARY KEY CLUSTERED 
  (
  REVIEW_ID
  )  
  ON DS_REVIEW_FG 
GO

ALTER TABLE REVIEWS$k
  ADD CONSTRAINT FK_REVIEWS_PROD_ID$k FOREIGN KEY (PROD_ID)
  REFERENCES PRODUCTS$k (PROD_ID)
  ON DELETE CASCADE
GO

ALTER TABLE REVIEWS$k
  ADD CONSTRAINT FK_REVIEWS_CUSTOMERID$k FOREIGN KEY (CUSTOMERID)
  REFERENCES CUSTOMERS$k (CUSTOMERID)
  ON DELETE CASCADE
GO

CREATE INDEX IX_REVIEWS_PROD_ID$k ON REVIEWS$k
  (
  PROD_ID
  )
  ON DS_IND_FG
GO

CREATE INDEX IX_REVIEWS_STARS$k ON REVIEWS$k
  (
  STARS
  )
  ON DS_IND_FG
GO

CREATE INDEX IX_REVIEWS_PRODSTARS$k ON REVIEWS$k
  (
  PROD_ID,STARS
  )
  ON DS_IND_FG
GO

ALTER TABLE REVIEWS_HELPFULNESS$k ADD CONSTRAINT PK_REVIEWS_HELPFULNESS$k PRIMARY KEY CLUSTERED 
  (
  REVIEW_HELPFULNESS_ID
  )  
  ON DS_REVIEW_FG 
GO

ALTER TABLE REVIEWS_HELPFULNESS$k
  ADD CONSTRAINT FK_REVIEW_ID$k FOREIGN KEY (REVIEW_ID)
  REFERENCES REVIEWS$k (REVIEW_ID)
  ON DELETE CASCADE
GO

CREATE INDEX IX_REVIEWS_HELP_REVID$k ON REVIEWS_HELPFULNESS$k
  (
  REVIEW_ID
  )
  ON DS_IND_FG
GO

CREATE INDEX IX_REVIEWS_HELP_CUSTID$k ON REVIEWS_HELPFULNESS$k
  (
  CUSTOMERID
  )
  ON DS_IND_FG
GO

CREATE INDEX IX_REORDER_PRODID$k ON REORDER$k
  (
  PROD_ID
  )
  ON DS_IND_FG
GO

CREATE NONCLUSTERED INDEX IX_REVIEWS_PRODID_REVID_DATE$k ON REVIEWS$k
  (
  PROD_ID ASC,
  REVIEW_ID ASC,
  REVIEW_DATE ASC
  )
  INCLUDE (STARS,CUSTOMERID,REVIEW_SUMMARY,REVIEW_TEXT)
  WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF)
  ON DS_IND_FG
go

CREATE NONCLUSTERED INDEX IX_REVIEWSHELPFULNESS_ID_HELPID$k ON [dbo].[REVIEWS_HELPFULNESS$k]
  (
  REVIEW_ID ASC,
  REVIEW_HELPFULNESS_ID ASC
  )
  INCLUDE (HELPFULNESS)
  WITH (SORT_IN_TEMPDB = OFF, DROP_EXISTING = OFF, ONLINE = OFF)
  ON DS_IND_FG
go



CREATE STATISTICS stat_cust_cctype_username$k ON CUSTOMERS$k(CREDITCARDTYPE, USERNAME)
GO
CREATE STATISTICS stat_cust_cctype_customerid$k ON CUSTOMERS$k(CREDITCARDTYPE, CUSTOMERID)
GO
CREATE STATISTICS stat_prod_prodid_special$k ON PRODUCTS$k(PROD_ID, SPECIAL)
GO
CREATE STATISTICS stat_prod_category_prodid$k ON PRODUCTS$k(CATEGORY, PROD_ID)
GO
CREATE STATISTICS stat_reviews_reviewid_stars$k ON REVIEWS$k(REVIEW_ID, STARS)
GO
CREATE STATISTICS stat_reviews_prodid_custid$k ON REVIEWS$k(PROD_ID, CUSTOMERID)
GO
CREATE STATISTICS stat_reviews_reviewid_date$k ON REVIEWS$k(REVIEW_ID, REVIEW_DATE)
GO
CREATE STATISTICS stat_reviews_date_prodid$k ON REVIEWS$k(REVIEW_DATE, PROD_ID)
GO
CREATE STATISTICS stat_reviews_prodid_stars_reviewid$k ON REVIEWS$k(PROD_ID, STARS, REVIEW_ID)
GO
  \n";
  close $OUT;
  }
  
sleep(1);
  
foreach my $k (1 .. ($numberofstores-1)){
  system ("start sqlcmd -C -S $sqlservertarget -U sa -P $password -i $sqlservertargetdir${pathsep}sqlserverds35_createindexes$k.sql");
  }
  system ("sqlcmd -C -S $sqlservertarget -U sa -P $password -i $sqlservertargetdir${pathsep}sqlserverds35_createindexes$numberofstores.sql");
sleep(180);    # Make sure that all indexes are created before finishing
